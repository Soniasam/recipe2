package com.codekages.daotests;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.hibernate.SessionFactory;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Commit;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.codekages.dao.ListOfRecipeDAO;
import com.codekages.dao.UserDAO;
import com.codekages.dto.AddListOfRecipeDTO;
import com.codekages.dto.AddUserDTO;
import com.codekages.model.ListOfRecipe;
import com.codekages.model.Recipe;
import com.codekages.model.RecipeList;
import com.codekages.model.User;

@ExtendWith(SpringExtension.class)
@ContextConfiguration("classpath:applicationContext.xml")
@WebAppConfiguration
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestPropertySource("classpath:springorm-test.properties")
@DirtiesContext(classMode = ClassMode.AFTER_CLASS)
public class ListOfRecipeDAOTest {

	@Autowired
	private ListOfRecipeDAO listofrecipeDao;
	@Autowired
	private UserDAO  userdao;
	@Autowired
	private SessionFactory sessionfactory;
	
	@Test
	@Transactional
	@Order(0)
	@Commit
	void testAddListOfRecipe_hasAutoGeneratedId() {
		AddListOfRecipeDTO dto = new AddListOfRecipeDTO();
	
		dto.setListOfRecipe("Italian");
		
		AddUserDTO userDto = new AddUserDTO();
		userDto.setUsername("user123");
		userDto.setPassword("12345");
		userDto.setFirstName("John");
		userDto.setLastName("Deo");
		userdao.addUser(userDto);
		
		User user = userdao.getUserByUsernameAndPassword("user123", "12345");
		user.setUserRole(1);
		
		ListOfRecipe listofrecipe = listofrecipeDao.addListOfRecipe(dto,user);
		
		assertEquals(1,listofrecipe.getId());
	}

	@Test
	@Transactional 
	@Order(1)

	void testEditListOfRecipe_hasAutoGeneratedId() {
		ListOfRecipe list = new ListOfRecipe();
		Recipe recipe = new Recipe();
		list.setListofrecipe("Asian");
		recipe.setRecipeName("FriedRice");
		
		
		RecipeList listofrecipe = listofrecipeDao.editListOfRecipe(list,recipe);
		assertEquals(1,listofrecipe.getId());
	
	}
	
	@Test
	@Transactional
	@Order(2)
	void testAddListOfRecipe_Success() {
		AddListOfRecipeDTO dto = new AddListOfRecipeDTO();
		dto.setListOfRecipe("Italian");
		
		
		User user = new User();
		user.setFirstName("John");
		user.setLastName("Deo");
		user.setId(1);
		user.setUsername("user123");
		user.setPassword("12345");
		user.setUserRole(1);
		
		
		ListOfRecipe actual = listofrecipeDao.addListOfRecipe(dto,user);
		ListOfRecipe expected = new ListOfRecipe("Italian",user);
		expected.setId(2);
		
		assertEquals(expected,actual);
	}
//	@Test
//	@Transactional
//	@Order(2)
//	void testGetListOfRecipeById_doesNotExsit() {
//		ListOfRecipe actual = listofrecipeDao.getListOfRecipeById(1000);
//	
//		ListOfRecipe expected = null;
//	assertEquals(expected,actual);
//	}
}
