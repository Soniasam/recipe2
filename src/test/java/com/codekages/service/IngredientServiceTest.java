package com.codekages.service;

import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.transaction.Transactional;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.test.annotation.Commit;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;

import com.codekages.dao.IngredientDAO;
import com.codekages.dto.AddIngredientDTO;
import com.codekages.dto.IngredientDTO;
import com.codekages.exception.BadParameterException;
import com.codekages.exception.IngredientNotFoundException;
import com.codekages.model.Ingredient;

@ExtendWith(SpringExtension.class)
@ContextConfiguration("classpath:applicationContext.xml")
@WebAppConfiguration
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@PropertySource("classpath:springorm-test.properties")
public class IngredientServiceTest {

	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	void setUp() throws Exception {
	}

	@AfterEach
	void tearDown() throws Exception {
	}

	@Autowired
	private IngredientService ingredientService;

	@Autowired
	private IngredientDAO ingredientDao;

	@Test
	@Transactional
	@Order(10)
	@Commit
	void testAddIngredient_hasAutoGeneratedId() throws BadParameterException {
		AddIngredientDTO dto = new AddIngredientDTO();
		dto.setName("Tomatoes");
		dto.setCost(3);
		
		Ingredient ingredient = ingredientService.addIngredient(dto);

		int actual = 1;		
		int expected = ingredient.getId();		
		assertEquals(expected, actual);	
	}	
	

	@Test()
	@Transactional
	@Order(11)
	//Testing AddIngredient with blank name
	void testAddIngredient_blankName() throws SQLException {
		AddIngredientDTO dto = new AddIngredientDTO();
		dto.setName("");
		dto.setCost(3);
		
		try {
			ingredientService.addIngredient(dto);	
			fail();	
		} catch (BadParameterException e) {
			assertEquals("You can not have a blank name for ingredient", e.getMessage());
		}			
	}	


	@Test()
	@Transactional
	@Order(12)
	//Testing AddIngredient with blank name with Space
	void testAddIngredient_blankNameWithSpaces() throws SQLException {
		AddIngredientDTO dto = new AddIngredientDTO();
		dto.setName("   ");
		dto.setCost(3);
		
		try {
			ingredientService.addIngredient(dto);	
			fail();	
		} catch (BadParameterException e) {
			assertEquals("You can not have a blank name for ingredient", e.getMessage());
		}		
	}	
	

	@Test()
	@Transactional
	@Order(12)
	//Testing AddIngredient with negative cost
	void testAddIngredient_NegativeCost() throws SQLException {
		AddIngredientDTO dto = new AddIngredientDTO();
		dto.setName("Eggs");
		dto.setCost(-10);
		
		try {
			ingredientService.addIngredient(dto);			
			fail();
		} catch (BadParameterException e) {
			assertEquals("You can not have a negative cost for ingredients", e.getMessage());
		}	
	}	

	


	
	/*
	 * editIngredients
	 */
	
//	@Test
//	@Transactional
//	@Order(14)
//	public void test_editIngredient_positivePath() throws DatabaseException, IngredientNotFoundException, BadParameterException, SQLException {
//		IngredientDTO dto = new IngredientDTO();
//		dto.setCost(2);
//
//		Ingredient ingredientWithId1 = new Ingredient("Tomatoes", 3);
//		
//		System.out.println(dto.getCost());
//		
//		when(ingredientDao.editIngredient(eq(1), eq(dto))).thenReturn(ingredientWithId1);
//		
//		Ingredient actual = ingredientService.editIngredient(1, dto);
//		
//		Ingredient expected = new Ingredient("tomatoes", 2);
//		
//		assertEquals(expected, actual);
//
////		Ingredient ingredient = ingredientService.editIngredient(1, dto);
//
////		int actual = 1;		
////		int expected = ingredient.getId();		
////		assertEquals(expected, actual);	
//		
//		
//	}
//	
//	
////	void testAddIngredient_hasAutoGeneratedId() throws BadParameterException {
////		AddIngredientDTO dto = new AddIngredientDTO();
////		dto.setName("Tomatoes");
////		dto.setCost(3);
////		
////		Ingredient ingredient = ingredientService.addIngredient(dto);
////
////		int actual = 1;		
////		int expected = ingredient.getId();		
////		assertEquals(expected, actual);	
//	
	
}
